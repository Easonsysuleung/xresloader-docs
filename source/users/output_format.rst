数据的输出类型和数据加载
=============================================

所有输出的数据的结构都是按照 https://github.com/xresloader/xresloader/blob/master/header/pb_header_v3.proto 的 ``xresloader_datablocks`` 的结构。 ::

> 转表功能和二进制数据读取的示例： https://github.com/xresloader/xresloader/tree/master/sample
> 文本和Msgpack数据读取示例： https://github.com/xresloader/xresloader/tree/master/loader-binding


输出类型
-----------------------------------------------

在 :doc:`./xresloader_core` 里可以看到，转表工具可以把Excel数据源导出成多种输出。下面列举重要的几种，项目可以根据自己的情况选择一种或几种导出方式。比如如果做Web端的GM工具，可以使用导出成xml或者javascript代码。

.. _output-format-export binary:

导出为协议二进制数据 (推荐)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

对应 ``-t bin`` 。这是推荐的转出方式，导出的是 ``xresloader_datablocks`` 打包后的二进制数据，文件占用最小。任何支持protobuf的语言和开发环境都可以读取。

其中每个 ``data_block`` 数据块都对应Excel里的一行数据，里面的数据格式是用户指定的协议打包成二进制后的数据。

.. _output-format-export text:

导出为json、xml、lua代码等文本数据 (可选)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

对应 ``-t json`` 、  ``-t xml`` 、 ``-t lua``  、 ``-t js`` 。 输出的格式也是header+数据body的形式。

Json的数据格式是:

.. code-block:: json

    [{
      "count": 数据条目数量,
      "xres_ver":"xresloader版本号",
      "hash_code":"文本输出无hash码",
      "data_ver":"数据版本号"
    }, {
      "协议名":[
          {"Excel数据Key": "Excel数据内容"},
          {"每行一条": "数据内容..."}
      ]
    }]

Xml的数据格式是:

.. code-block:: xml

    <?xml version="1.0" encoding="UTF-8"?>
    <root>
      <!--this file is generated by xresloader, please don't edit it.-->
      <header>
        <xres_ver>xresloader版本号</xres_ver>
        <hash_code>文本输出无hash码</hash_code>
        <data_ver>数据版本号</data_ver>
        <count>数据条目数量</count>
      </header>
      <body>
        <协议名>每行一条，数据内容
          <Excel数据Key>Excel数据内容</Excel数据Key>
        </协议名>
      </body>
    </root>

Lua和Javacript的输出方式和输出设置有关，也很容易看懂，这里就不全部列举了。只列举一个Lua的其中一种输出方式:

.. code-block:: lua

    -- this file is generated by xresloader, please don't edit it.

    return {
        [1] = {
            xres_ver = "xresloader版本号",
            hash_code = "文本输出无hash码",
            data_ver = "数据版本号",
            count = 数据条目数量,
        },
        协议名 = {
            { Excel数据Key: Excel数据内容 } -- 每行一条，数据内容
        }
    }

默认情况，文本数据的输出是紧缩的。就没有上面格式列举出的看起来美观，可以通过 ``--pretty 缩进数量`` 来设置格式化输出。

.. _output-format-export msgpack:

导出为Msgpack打包的二进制数据 (可选)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

对应 ``-t msgpack`` 。 如果不希望引入复杂的加载库，又希望打包出的数据是紧缩的二进制数据。我们提供了打包成msgpack格式的选项。
读取msgpack的工具和库很多，并且效率也很高，语言支持很很好。数据输出结构是：

.. code-block:: bash

    {
       xres_ver: "xresloader版本号",
       data_ver: "数据版本号",
       count: 数据条目数量,
       hash_code: "hash算法:hash值",
    }
    配置协议名: [
        {配置内容},
        {配置内容},
        {配置内容},
    ]

使用Msgpack的话， https://github.com/xresloader/xresloader/tree/master/loader-binding/msgpack 里有python2和node.js的读取示例。

.. _output-format-export enum:

导出枚举类型成代码 (可选)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

对应 ``-c`` 然后可以使用 ``-t json`` 、  ``-t xml`` 、 ``-t lua``  、 ``-t js`` 来指定按哪种方式输出枚举量。
比如把protobuf协议里的枚举输出成Lua代码，proto文件：

.. code-block:: proto

    // 常量类型
    enum game_const_config {
        option allow_alias = true;
        EN_GCC_UNKNOWN              = 0;
        EN_GCC_PERCENT_BASE         = 10000;        
        EN_GCC_RANDOM_RANGE_UNIT    = 10;           
        EN_GCC_RESOURCE_MAX_LIMIT   = 9999999;      
        EN_GCC_LEVEL_LIMIT          = 999;          
        EN_GCC_SOLDIER_TYPE_MASK    = 100;          
        EN_GCC_ACTIVITY_TYPE_MASK   = 1000;         
        EN_GCC_FORMULAR_TYPE_MASK   = 10;           
        
        EN_GCC_SCREEN_WIDTH         = 1136;         
        EN_GCC_SCREEN_HEIGHT        = 640;          
        EN_GCC_CAMERA_OFFSET        = 268;          
    }


    // 货币类型
    enum cost_type {
        EN_CT_UNKNOWN              = 0;
        EN_CT_MONEY                = 10001;
        EN_CT_DIAMOND              = 10101;
    }

Lua代码目标:

.. code-block:: lua

    -- this file is generated by xresloader, please don't edit it.
    local const_res = {
      game_const_config = {
        EN_GCC_SCREEN_WIDTH = 1136,
        EN_GCC_SCREEN_HEIGHT = 640,
        EN_GCC_UNKNOWN = 0,
        EN_GCC_CAMERA_OFFSET = 268,
        EN_GCC_FORMULAR_TYPE_MASK = 10,
        EN_GCC_LEVEL_LIMIT = 999,
        EN_GCC_RESOURCE_MAX_LIMIT = 9999999,
        EN_GCC_SOLDIER_TYPE_MASK = 100,
        EN_GCC_PERCENT_BASE = 10000,
        EN_GCC_RANDOM_RANGE_UNIT = 10,
        EN_GCC_ACTIVITY_TYPE_MASK = 1000,
      },
      cost_type = {
        EN_CT_DIAMOND = 10101,
        EN_CT_MONEY = 10001,
        EN_CT_UNKNOWN = 0,
      },
    }

    return const_res

对于导出的代码，可以通过 ``--pretty 缩进数量`` 来设置格式化输出。

数据加载
-----------------------------------------------

加载数据可以有多种方法，项目可以根据自己的需要选择任意一种或几种合适的加载方法。

Step-6-1(推荐): 使用C++加载二进制数据
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

此加载方式需要上面的 :ref:`output-format-export binary`

Step-6-2(推荐): 使用lua-pbc加载二进制数据
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

此加载方式需要上面的 :ref:`output-format-export binary`

Step-6-3(推荐): 使用C#和DynamicMessage-net加载二进制数据
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

此加载方式需要上面的 :ref:`output-format-export binary`

Step-6-4(可选): 使用node.js加载javascript文本数据
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

此加载方式需要上面的 :ref:`output-format-export text`

https://github.com/xresloader/xresloader/tree/master/loader-binding/msgpack

Step-6-5(可选): 使用lua加载导出的枚举类型
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

此加载方式需要上面的 :ref:`output-format-export enum`